@startuml Monochrome Game Architectural
 
!include https://raw.githubusercontent.com/patrik-csak/one-dark-plantuml-theme/v1.0.1/theme.puml
skinparam backgroundcolor #1E2021
skinparam linetype ortho

title Monochrome

package App {

package GameModel {
    enum Difficulty {
        easy(Int)
        medium(Int)
        hard(Int)
    }

    enum CellSide {
        front 
        back

        + value: Int
    }

    struct Cell {
        + side: CellSide
    }

    struct Game {
        + field: [[Cell]]
        + difficulty: Difficulty
        + currentScore: Int
        + timeElapsed: Double
    }

    Cell *-- CellSide
    Game *-- Cell
    Game *-- Difficulty 
}

package UserModel {
    struct GameProgress {
        + games: [Game]
    }

    struct User {
        + id: UUID
        + name: String
        + email: String
        + gameProgress: GameProgress
        + isRegistered: Bool
    }

    User *-- GameProgress

    GameProgress o-R- Game
}

package NetworkLayer {
    protocol INetworkService {
        perform(request: Request, completion: (Result<Response, Error>) -> Void)
    }

    protocol IAuthService {
        + login(user: User, completion: (Result<Void, Error>) -> Void)
    }

    class AuthService {
        - networkService: INetworkService

        + login(user: User, completion: (Result<Void, Error>) -> Void)
    }

    AuthService .U.> IAuthService
    AuthService o-R- User
    AuthService *-D- INetworkService

    INetworkService o-- Networking
}

package UserService {
    protocol IUserRepository {
        + save(user: User)
        + get(id: UUID) -> User
        + update(user: User) -> Bool
        + delete(user: User) -> Bool
    }

    class UserRepository {
        + save(user: User) -> Bool
        + get(id: UUID) -> User
        + update(user: User) -> Bool
        + delete(user: User) -> Bool
    }

    protocol IUserManager {
        +isLogged: Bool
        
        +login(user: User, completion: (Result<Void, Error>) -> Void)
        +logout(completion: (Result<Void, Error>) -> Void)
    }

    class UserManager {
        - user: User

        - authService: AuthService
        - userRepository: UserRepository

        +isLogged: Bool
        
        +login(user: User, completion: (Result<Void, Error>) -> Void)
        +logout(completion: (Result<Void, Error>) -> Void)
    }

    UserRepository .U.> IUserRepository
    UserRepository o-- User

    UserManager .U.> IUserManager
    UserManager *-- User
    UserManager *-- IUserRepository

    UserManager *-L- IAuthService
}

package GaneService {
    protocol IGameRepository {
        + getGame(id: UUID) -> Game
        + save(game: Game) -> Bool
    }

    class GameRepository {
        + getGame(id: UUID) -> Game
        + save(game: Game) -> Bool
    }

    protocol IGameManager {
        + startGame() -> Game
        + saveGame(game: Game) -> Bool
    }

    class GameManager {
        - game: Game

        + startGame() -> Game
        + saveGame(game: Game) -> Bool
    }

    GameRepository .U.> IGameRepository
    GameRepository o-- Game
    GameRepository o-- User

    GameManager .U.> IGameManager
    GameManager *-- IGameRepository
    GameManager *-- Game
}

package ViewModel {
    protocol IGameViewModel {
        + logout(completion: (Result<Void, Error>) -> Void)
        + startNewGame() -> Game
        + saveGame() -> Bool
        + getColorForCellAt(x: Int, y: Int) -> UIColor
        + changeCellColorAt(x: Int, y: Int) -> Bool
    }

    class GameViewModel {
        - gameManager: IGameManager
        - userManager: IUserManager

        + logout(completion: (Result<Void, Error>) -> Void)
        + startNewGame() -> Game
        + saveGame() -> Bool
        + getColorForCellAt(x: Int, y: Int) -> UIColor
        + changeCellColorAt(x: Int, y: Int) -> Bool
    }

    protocol ILoginViewModel {
        + login(user: User, completion: (Result<Void, Error>) -> Void)
    }

    class LoginViewModel {
        - userManager: IUserManager

        + login(user: User, completion: (Result<Void, Error>) -> Void)
    }

    protocol IRootViewModel {
        + isLogged: Bool
    }

    class RootViewModel {
        - userManager: IUserManager
        + isLogged: Bool
    }

    GameViewModel .U.> IGameViewModel
    GameViewModel *-- IGameManager
    GameViewModel o-- IUserManager

    LoginViewModel o-- IUserManager
    LoginViewModel .U.> ILoginViewModel

    RootViewModel .U.> IRootViewModel
    RootViewModel *-- IUserManager
}

package View {

    struct GameView {
        - viewModel: IGameViewModel
    }

    struct LoginView {
        - viewModel: ILoginViewModel
    }

    struct RootView {
        - viewModel: IRootViewModel
    }

    GameView *-D- IGameViewModel

    LoginView *-- ILoginViewModel

    RootView *-D- IRootViewModel
    RootView *-L- LoginView
    RootView *-R- GameView
}

struct MonochromeApp {}

MonochromeApp *-D- RootView

}

@enduml